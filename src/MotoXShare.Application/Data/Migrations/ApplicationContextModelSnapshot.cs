// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotoXShare.Application.Data.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MotoXShare.Application.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MotoXShare.Domain.Model.DeliveryRider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CNH")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CNHImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CNHType")
                        .HasColumnType("integer");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DeliveryRider", (string)null);
                });

            modelBuilder.Entity("MotoXShare.Domain.Model.DeliveryRiderNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid[]>("DeliveryRidersIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("MotoXShare.Domain.Model.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Rented")
                        .HasColumnType("boolean");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Motorcycle", (string)null);
                });

            modelBuilder.Entity("MotoXShare.Domain.Model.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("DeliveryRiderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryRiderId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("MotoXShare.Domain.Model.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeliveryRiderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlanType")
                        .HasColumnType("integer");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryRiderId")
                        .IsUnique();

                    b.HasIndex("MotorcycleId")
                        .IsUnique();

                    b.ToTable("Rental", (string)null);
                });

            modelBuilder.Entity("MotoXShare.Domain.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MotoXShare.Domain.Model.DeliveryRiderNotification", b =>
                {
                    b.HasOne("MotoXShare.Domain.Model.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MotoXShare.Domain.Model.Order", b =>
                {
                    b.HasOne("MotoXShare.Domain.Model.DeliveryRider", "DeliveryRider")
                        .WithMany()
                        .HasForeignKey("DeliveryRiderId");

                    b.Navigation("DeliveryRider");
                });

            modelBuilder.Entity("MotoXShare.Domain.Model.Rental", b =>
                {
                    b.HasOne("MotoXShare.Domain.Model.DeliveryRider", "DeliveryRider")
                        .WithOne("Rental")
                        .HasForeignKey("MotoXShare.Domain.Model.Rental", "DeliveryRiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotoXShare.Domain.Model.Motorcycle", "Motorcycle")
                        .WithOne("Rental")
                        .HasForeignKey("MotoXShare.Domain.Model.Rental", "MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryRider");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("MotoXShare.Domain.Model.DeliveryRider", b =>
                {
                    b.Navigation("Rental");
                });

            modelBuilder.Entity("MotoXShare.Domain.Model.Motorcycle", b =>
                {
                    b.Navigation("Rental");
                });
#pragma warning restore 612, 618
        }
    }
}
